---
# (C) 2023 Medeopolis. Karl Goetz <karl+ansible@medeopolis.au>

# These are the tasks directly related to instance creation. Other tasks - ssh
# key management, DNS management, vultr account management - belong elsewhere.

# Playbook parameters:
# -e instance_hostname=medeopolis.example.com

# Below is an example inventory section to go in
# inventory/host_vars/medeopolis.example.com or split up in group_vars/ (or
# some dynamic source...). Shows required fields and the format of their values.

# # Required
# vultr_api_key: 'some long string'
# deployment_region: syd
# instance_os: "Ubuntu 22.04 LTS x64"
# instance_label: "Server built via Medeopolis platform-playbooks"
# instance_plan: "xyz-12-23ab"
# firewall_group_description: "String describing firewall rule group"
# One of firewall_rule_entries or default_firewall_rule_entries must be defined
# default_firewall_rule_entries:
#   - subnet: "0.0.0.0"
#     port_min: "80"
#     port_max: "1024"
#     subnet_size: "0"
#     ip_gen: v4
#   - subnet: "0.0.0.0"
#     port_min: "443"
#     port_max: "1024"
#     subnet_size: "0"
#     ip_gen: v4
#
# # Optional
# instance_cloud_init_data: |
#   #cloud-config
#   ssh_authorized_keys:
#     - 'ecdsa-sha2-nistp256 blah blah'
#     - 'ssh-rsa foo bar'
# volume_entries:
#   - { name: "test volume 1", volume_size: 10 }
#   - { name: "test volume two", volume_size: 20 }
# vpc_description: 'My VPC in Sydney'
# vpc_subnet: 10.11.12.0
# vpc_subnet_mask: 24
# Plus lots of other dials...


- name: Ensure all VMs which should be running at Vultr are
  hosts: localhost
  gather_facts: false
  tasks:
    - name: Ensure instance_hostname has been passed
      ansible.builtin.assert:
        that:
          - instance_hostname is defined
          - instance_hostname | length > 0
        fail_msg: "instance_hostname was not supplied, run with -e instance_hostname=abc.example.com"

    - name: Ensure inventory_hostname hostvars are defined
      ansible.builtin.assert:
        that:
          - hostvars[instance_hostname] is defined
          - hostvars[instance_hostname] | length > 0
        fail_msg: "hostvars are  not defined; add this host to an inventory source and add it to appropriate groups"

    - name: Ensure VPC exists
      vultr.cloud.vpc:
        api_key: "{{ vultr_api_key }}"
        description: "{{ hostvars[instance_hostname].vpc_description }}"
        region: "{{ hostvars[instance_hostname].deployment_region }}"
        state: present
        v4_subnet: "{{ hostvars[instance_hostname].vpc_subnet }}"
        v4_subnet_mask: "{{ hostvars[instance_hostname].vpc_subnet_mask }}"
      when:
        - hostvars[instance_hostname].vpc_subnet
        - hostvars[instance_hostname].vpc_subnet_mask
      register: vpc_result
      failed_when:
        - ( vpc_result.vultr_vpc.v4_subnet != hostvars[instance_hostname].vpc_subnet ) and vpc_result.changed

    - name: Ensure firewall rule group is configured for this host
      vultr.cloud.firewall_group:
        api_key: "{{ vultr_api_key }}"
        description: "{{ hostvars[instance_hostname].firewall_group_description | default('Group to hold all rules associated with ' + instance_hostname) }}"
        state: present
      register: firewall_group_result

    - name: Ensure firewall rules exist
      vultr.cloud.firewall_rule:
        api_key: "{{ vultr_api_key }}"
        group: "{{ firewall_group_result.vultr_firewall_group.description }}"
        ip_type: "{{ item.ip_gen }}"
        notes: "Access to port range {{ item.port_min }} through {{ item.port_max |default(item.port_min) }} from {{ item.subnet }}/{{ item.subnet_size }}"
        port: "{{ item.port_min + ':' + item.port_max |default(item.port_min) }}"
        protocol: "{{ item.proto |default('tcp') }}"
        state: present
        subnet: "{{ item.subnet }}"
        subnet_size: "{{ item.subnet_size }}"
      when: firewall_group_result.vultr_firewall_group.description is defined
      # FIXME: so far i haven't managed to make this combine both sets of rules - which is what I actually need.
      loop: "{{ hostvars[instance_hostname].firewall_rule_entries | default(default_firewall_rule_entries) }}"
      register: firewall_rules_result

    - name: Create Instance
      vultr.cloud.instance:
        api_key: "{{ vultr_api_key }}"
        activation_email: "{{ hostvars[instance_hostname].instance_activation_email | default('no') }}"
        enable_ipv6: false
        backups: "{{ hostvars[instance_hostname].instance_backups | default('no') }}"
        firewall_group: "{{ firewall_group_result.vultr_firewall_group.description }}"
        hostname: "{{ instance_hostname | default(inventory_hostname) }}"
        label: "{{ hostvars[instance_hostname].instance_label }}"
        os: "{{ hostvars[instance_hostname].instance_os }}"
        plan: "{{ hostvars[instance_hostname].instance_plan }}"
        region: "{{ hostvars[instance_hostname].deployment_region }}"
        ssh_keys: "{{ hostvars[instance_hostname].instance_ssh_keys }}"
        state: present
        user_data: "{{ instance_cloud_init_data | default('') }}"
        vpcs: [ "{{ hostvars[instance_hostname].vpc_description | default(omit) }}" ]
      register: instance_result
      when: firewall_group_result.vultr_firewall_group.description is defined

    - name: Create block storage for this instance
      vultr.cloud.block_storage:
        api_key: "{{ vultr_api_key }}"
        attached_to_instance: "{{ instance_result.vultr_instance.id }}"
        label: "{{ item.name }}"
        live: true
        region: "{{ hostvars[instance_hostname].deployment_region }}"
        size_gb: "{{ item.volume_size }}"
        state: present
      when:
        - instance_result is defined
        - hostvars[instance_hostname].volume_entries is defined
        - hostvars[instance_hostname].volume_entries | length > 0
      loop: "{{ hostvars[instance_hostname].volume_entries }}"
      register: volume_result

    # Could take another ~80 seconds for the instance to boot.
    # This assumes the testing host is within the firewall whitelist/s
    - name: Check if SSH is available
      wait_for:
        host: "{{ instance_result.vultr_instance.main_ip }}"
        port: 22
        state: started
      when: instance_result.changed is true

    - name: Server technical details
      debug:
        var: instance_result

