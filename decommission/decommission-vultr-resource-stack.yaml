---
# TODO: option to retain block storage,
# There doesn't seem to be a way to access backups via vultr.cloud collection.
# -e instance_hostname=medeopolis.example.com to set host for deletion. Required.
# -e delete_volumes=false to leave any volumes configured (in Ansible) for this host. Optional; default is true

- name: Delete VM and associated resources at Vultr
  hosts: localhost
  gather_facts: no
  vars:
    delete_volumes: true
  tasks:
    - name: Ensure instance_hostname has been passed
      ansible.builtin.assert:
        that:
          - instance_hostname is defined
          - instance_hostname |length > 0
        fail_msg: "instance_hostname was not supplied, run with -e instance_hostname=abc.example.com"

    # TODO - name: Confirm you wish to delete {{ instance_hostname }}
    # read user input

    - name: Delete instance
      vultr.cloud.instance:
        api_key: "{{ vultr_api_key }}"
        label: "{{ hostvars[instance_hostname].instance_label }}"
        region: "{{ hostvars[instance_hostname].deployment_region }}"
        state: absent
      register: instance_deletion

    - name: Delete firewall group
      vultr.cloud.firewall_group:
        api_key: "{{ vultr_api_key }}"
        description: "{{ hostvars[instance_hostname].firewall_group_description |default('Group to hold all rules associated with ' + instance_hostname) }}"
        state: absent
      register: firewall_group_deletion

    - name: Delete block storage for this instance
      vultr.cloud.block_storage:
        api_key: "{{ vultr_api_key }}"
        label: "{{ item.name }}"
        region: "{{ hostvars[instance_hostname].deployment_region }}"
        state: absent
      when:
        - instance_deletion is defined
        - delete_volumes is true
        - hostvars[instance_hostname].volume_entries is defined
        - hostvars[instance_hostname].volume_entries |length > 0
      loop: "{{ hostvars[instance_hostname].volume_entries }}"
      register: volume_deletion

